<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="System.Runtime.Serialization" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#
	// get current project 
	// read project file
	IServiceProvider hostServiceProvider = (IServiceProvider) this.Host;
	EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
	if (dte == null) {
		throw new Exception("Could not get IDE instance - try restarting Visual Studio");
	}

    string templateFile = this.Host.TemplateFile;

    this.templateProjectItem = dte.Solution.FindProjectItem(templateFile);
    foreach (EnvDTE.Project currentProject in dte.Solution.OfType<EnvDTE.Project>()) {
        this.ProcessRecursive(currentProject.CodeModel);
    }
#>

namespace BfCompiler.Core.Visitor {
	using Syntax;

    partial class SyntaxNodeVisitor {

<# foreach (var clazz in this._syntaxNodeClasses) { #>

		<# if (IsComposite(clazz)) { #>

		public virtual SyntaxNodeVisitor BeginVisit(<#=clazz.Name#> node) {return this;}

		public virtual void EndVisit(<#=clazz.Name#> node) {}

		<# }  else { #>

		public virtual void Visit(<#=clazz.Name#> node) {}

		<# } #>
<#}#>

	}
}

<#+
	private EnvDTE.ProjectItem templateProjectItem;
	private readonly List<CodeClass> _syntaxNodeClasses = new List<CodeClass>();

	private void ProcessRecursive(CodeModel codeModel) {
	    if (codeModel == null) {
	        return;
	    }

		foreach(EnvDTE.CodeElement element in codeModel.CodeElements)
		{
		    this.ProcessRecursive(element);
		}
    }

	private bool IsComposite(CodeClass clazz) {
		return clazz.Attributes.OfType<CodeAttribute>().Any(x => x.Name.Equals("CompositeNode"));
	}

    private void ProcessRecursive(CodeElement codeElement) {
        // process class
        if (codeElement.Kind == EnvDTE.vsCMElement.vsCMElementClass) {
			var myClass = (EnvDTE.CodeClass)codeElement;
            this.ProcessClass(myClass);
		}

		// recursively process namespace
		if (codeElement.Kind == EnvDTE.vsCMElement.vsCMElementNamespace) {
			var myNs = (EnvDTE.CodeNamespace)codeElement;

			foreach (CodeElement childCodeElement in myNs.Members) {
			    this.ProcessRecursive(childCodeElement);
			}
		}
    }

	
    private void ProcessClass(CodeClass cls) {
		var baseCls = cls.Bases.OfType<CodeClass>().FirstOrDefault();
		if (baseCls == null || !(baseCls.Name == "SyntaxNode" && baseCls.Namespace.Name == "BfCompiler.Core.Syntax")) return;

		this._syntaxNodeClasses.Add(cls);
    }
#>